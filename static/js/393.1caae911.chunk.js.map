{"version":3,"file":"static/js/393.1caae911.chunk.js","mappings":"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","sources":["components/MapWithMarker/MapWithMarker.jsx","components/CityWeather/CityWeather.jsx","components/CityWeather/RenderWeatherDataItem.jsx","components/CityListRender/CityListRender.jsx","components/CitySearchForm/CitySearchForm.jsx","pages/Weather/Weather.Styled.js","pages/Weather/Weather.jsx","redux/weather/weather-selectors.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport { fromLonLat } from 'ol/proj';\nimport { Icon, Style } from 'ol/style';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer } from 'ol/layer';\nimport { OSM } from 'ol/source';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\n\nexport const MapWithMarker = ({ lat = 50, lon = 50 }) => {\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    const map = new Map({\n      target: mapRef.current,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n        new VectorLayer({\n          source: new VectorSource({\n            features: [\n              new Feature({\n                geometry: new Point(fromLonLat([lon, lat])),\n              }),\n            ],\n          }),\n          style: new Style({\n            image: new Icon({\n              anchor: [0.5, 1],\n              src: 'https://openlayers.org/en/latest/examples/data/icon.png',\n            }),\n          }),\n        }),\n      ],\n      view: new View({\n        center: fromLonLat([lon, lat]),\n        zoom: 7,\n      }),\n    });\n    return () => map.dispose();\n  }, [lat, lon]);\n\n  return <div ref={mapRef} style={{ width: '100%', height: '400px' }}></div>;\n};\n","import {\n  Typography,\n  Link,\n  List,\n  CircularProgress,\n  Button,\n  useTheme,\n} from '@mui/material';\n\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { getCityWeather } from 'redux/weather/weather-selectors';\n\nimport { RenderWeatherDataItem } from './RenderWeatherDataItem';\nimport { MapWithMarker } from 'components/MapWithMarker/MapWithMarker';\n\nimport bg from '../../images/bgWeatherCard.jpg';\n\nexport const formatTemperature = temperature => {\n  return temperature.toFixed(1);\n};\n\nexport const CityWeather = ({ originalCity }) => {\n  const cityWeather = useSelector(getCityWeather);\n  const navigate = useNavigate();\n  const theme = useTheme();\n\n  const handleViewDetailsClick = () => {\n    navigate(`/weather/${originalCity}/details`);\n  };\n\n  if (\n    !cityWeather ||\n    !cityWeather.coord ||\n    !cityWeather.weather ||\n    !cityWeather.main ||\n    !cityWeather.wind\n  ) {\n    return (\n      <CircularProgress\n        size={24}\n        sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          marginTop: '-12px',\n          marginLeft: '-12px',\n          color: 'rgba(255,255,255,0.5)',\n        }}\n      />\n    );\n  }\n\n  const {\n    weather: [{ main: weatherMain, description: weatherDescription, icon }],\n    main: { temp, feels_like: feelsLike, pressure, humidity },\n    wind: { speed: windSpeed },\n  } = cityWeather;\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">\n        Weather in {originalCity}\n      </Typography>\n      <List\n        sx={{\n          border: '1px solid black',\n          borderRadius: theme.spacing(2),\n          backgroundImage: `url(${bg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          display: 'flex',\n          color: 'white',\n          textShadow: '0 0 4px black',\n          fontSize: '25px',\n          justifyContent: 'space-evenly',\n          marginBottom: theme.spacing(2),\n        }}\n      >\n        <img\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n          alt=\"weather_image\"\n        />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {RenderWeatherDataItem(\n            'Weather',\n            `${weatherMain}, ${weatherDescription}`\n          )}\n          {RenderWeatherDataItem('Temperature', `${formatTemperature(temp)}℃`)}\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {RenderWeatherDataItem(\n            'Feels like',\n            `${formatTemperature(feelsLike)}℃`\n          )}\n          {RenderWeatherDataItem('Pressure', `${pressure} hpa`)}\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {RenderWeatherDataItem('Humidity', `${humidity} %`)}\n          {RenderWeatherDataItem('Wind Speed', `${windSpeed} m/s`)}\n        </div>\n      </List>\n      <Button\n        fullWidth\n        color=\"primary\"\n        variant=\"contained\"\n        onClick={handleViewDetailsClick}\n        component={Link}\n        aria-label={`View details for ${originalCity}`}\n        sx={{ marginBottom: theme.spacing(2) }}\n      >\n        View Details\n      </Button>\n      <MapWithMarker lat={cityWeather.coord.lat} lon={cityWeather.coord.lon} />\n    </>\n  );\n};\n","import { ListItem, ListItemText } from '@mui/material';\n\nexport const RenderWeatherDataItem = (label, value) => {\n  return (\n    <ListItem>\n      <ListItemText primary={`${label}: ${value}`} />\n    </ListItem>\n  );\n};\n","import {\n  Button,\n  CircularProgress,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@mui/material';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGetCordinatesWeather } from 'redux/weather/weather-operations';\nimport {\n  getCities,\n  getIsLoadingWeather,\n} from 'redux/weather/weather-selectors';\n\nexport const CityListRender = ({ setOriginalCity }) => {\n  const dispatch = useDispatch();\n  const cityNames = useSelector(getCities);\n  const isLoading = useSelector(getIsLoadingWeather);\n\n  const onClickHandler = (event, cityName) => {\n    event.preventDefault();\n    setOriginalCity(cityName);\n    const coordinates = {\n      lat: event.target.dataset.lat,\n      lon: event.target.dataset.lon,\n      units: event.target.dataset.units,\n    };\n    dispatch(fetchGetCordinatesWeather(coordinates));\n  };\n\n  return (\n    <List sx={{ overflowY: 'scroll', maxHeight: '170px' }}>\n      {cityNames &&\n        cityNames.map(item => (\n          <ListItem key={item?.lat + item?.lon}>\n            <ListItemText\n              primary={`City: ${item?.name ?? 'no information available'}`}\n              secondary={\n                <>\n                  <Typography component=\"span\" sx={{ margin: 1 }}>\n                    State: {item?.state ?? 'no information available'}\n                  </Typography>\n                  <Typography component=\"span\" sx={{ margin: 1 }}>\n                    Country: {item?.country ?? 'no information available'}\n                  </Typography>\n                  <Typography component=\"span\" sx={{ margin: 1 }}>\n                    lat: {item?.lat ?? 'no information available'}\n                  </Typography>\n                  <Typography component=\"span\" sx={{ margin: 1 }}>\n                    lon: {item?.lon ?? 'no information available'}\n                  </Typography>\n                </>\n              }\n            />\n            <Button\n              variant=\"contained\"\n              onClick={event => onClickHandler(event, item.name)}\n              data-lat={item?.lat}\n              data-lon={item?.lon}\n              data-units=\"metric\"\n              disabled={isLoading}\n              sx={{ ml: 2 }}\n            >\n              {isLoading ? <CircularProgress size={24} /> : 'Check Weather'}\n            </Button>\n          </ListItem>\n        ))}\n    </List>\n  );\n};\n","import { useTheme } from '@mui/material';\nimport { Box, Button, CircularProgress, TextField } from '@mui/material';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGetCityCoordinates } from 'redux/weather/weather-operations';\nimport { getIsLoadingCities } from 'redux/weather/weather-selectors';\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nconst validationSchema = yup.object({\n  city: yup.string('Enter City Name').required('City Name is Required'),\n  state: yup.string('Enter State Name'),\n  country: yup.string('Enter Country Name'),\n});\n\nexport const CitySearchForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoadingCities);\n  const theme = useTheme();\n\n  const formik = useFormik({\n    initialValues: {\n      city: '',\n      state: '',\n      country: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      const cityName = {\n        city: values.city,\n        state: values.state,\n        country: values.country,\n      };\n      dispatch(fetchGetCityCoordinates(cityName));\n    },\n  });\n\n  return (\n    <>\n      <Box\n        component=\"form\"\n        onSubmit={formik.handleSubmit}\n        sx={{\n          gap: 1,\n        }}\n      >\n        <TextField\n          sx={{ marginBottom: theme.spacing(1) }}\n          fullWidth\n          id=\"city\"\n          name=\"city\"\n          label=\"City\"\n          value={formik.values.city}\n          onChange={formik.handleChange}\n          error={formik.touched.city && Boolean(formik.errors.city)}\n          helperText={formik.touched.city && formik.errors.city}\n        />\n        <TextField\n          sx={{ marginBottom: theme.spacing(1) }}\n          fullWidth\n          id=\"state\"\n          name=\"state\"\n          label=\"State\"\n          value={formik.values.state}\n          onChange={formik.handleChange}\n          error={formik.touched.state && Boolean(formik.errors.state)}\n          helperText={formik.touched.state && formik.errors.state}\n        />\n        <TextField\n          sx={{ marginBottom: theme.spacing(1) }}\n          fullWidth\n          id=\"country\"\n          name=\"country\"\n          label=\"Country\"\n          value={formik.values.country}\n          onChange={formik.handleChange}\n          error={formik.touched.country && Boolean(formik.errors.country)}\n          helperText={formik.touched.country && formik.errors.country}\n        />\n\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n          sx={{ position: 'relative' }}\n        >\n          Submit\n          {isLoading && (\n            <CircularProgress\n              size={24}\n              sx={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                marginTop: '-12px',\n                marginLeft: '-12px',\n                color: 'rgba(255,255,255,0.5)',\n              }}\n            />\n          )}\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { styled } from '@mui/material';\n\nexport const StyledImg = styled('img')(({ theme }) => ({\n  width: '100%',\n  height: '100%',\n  objectFit: 'cover',\n}));\n","import { Container, useTheme } from '@mui/material';\nimport { CityListRender } from 'components/CityListRender/CityListRender';\nimport { CitySearchForm } from 'components/CitySearchForm/CitySearchForm';\nimport { CityWeather } from 'components/CityWeather/CityWeather';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getCityWeather } from 'redux/weather/weather-selectors';\nimport { Box } from '@mui/material';\n\nimport gif from '../../images/climate_change_map.gif';\nimport { StyledImg } from './Weather.Styled';\n\nconst Weather = () => {\n  const [originalCity, setOriginalCity] = useState('');\n  const cityWeather = useSelector(getCityWeather);\n  const theme = useTheme();\n\n  return (\n    <>\n      <Container sx={{ padding: theme.spacing(2) }}>\n        <CitySearchForm />\n        <CityListRender setOriginalCity={setOriginalCity} />\n        {originalCity.length === 0 || cityWeather.length === 0 ? (\n          <Box\n            sx={{ borderRadius: '20px', overflow: 'hidden', height: '350px' }}\n          >\n            <StyledImg src={gif} alt=\"wether_changing\" />\n          </Box>\n        ) : (\n          <CityWeather originalCity={originalCity} />\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default Weather;\n","export const getCities = state => state.cities.cities;\nexport const getCityWeather = state => state.cities.cityWeather;\nexport const getIsLoadingCities = state => state.cities.isLoadingCities;\nexport const getIsLoadingWeather = state => state.cities.isLoadingWeather;\nexport const getError = state => state.cities.error;\n"],"names":["MapWithMarker","lat","lon","mapRef","useRef","useEffect","map","Map","target","current","layers","TileLayer","source","OSM","VectorLayer","VectorSource","features","Feature","geometry","Point","fromLonLat","style","Style","image","Icon","anchor","src","view","View","center","zoom","dispose","ref","width","height","formatTemperature","temperature","toFixed","CityWeather","originalCity","cityWeather","useSelector","getCityWeather","navigate","useNavigate","theme","useTheme","coord","weather","main","wind","CircularProgress","size","sx","position","top","left","marginTop","marginLeft","color","weatherMain","weatherDescription","description","icon","temp","feelsLike","feels_like","pressure","humidity","windSpeed","speed","Typography","variant","component","List","border","borderRadius","spacing","backgroundImage","bg","backgroundSize","backgroundPosition","backgroundRepeat","display","textShadow","fontSize","justifyContent","marginBottom","alt","flexDirection","RenderWeatherDataItem","Button","fullWidth","onClick","Link","label","value","primary","CityListRender","setOriginalCity","dispatch","useDispatch","cityNames","getCities","isLoading","getIsLoadingWeather","overflowY","maxHeight","item","ListItem","ListItemText","name","secondary","margin","state","country","event","cityName","preventDefault","coordinates","dataset","units","fetchGetCordinatesWeather","onClickHandler","disabled","ml","validationSchema","yup","city","required","CitySearchForm","getIsLoadingCities","formik","useFormik","initialValues","onSubmit","values","fetchGetCityCoordinates","Box","handleSubmit","gap","TextField","id","onChange","handleChange","error","touched","Boolean","errors","helperText","type","StyledImg","styled","objectFit","useState","Container","padding","length","overflow","gif","cities","isLoadingCities","isLoadingWeather"],"sourceRoot":""}