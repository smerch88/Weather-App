{"version":3,"file":"static/js/272.583d00a5.chunk.js","mappings":"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","sources":["redux/weather/weather-selectors.js","components/CityListRender/CityListRender.jsx","components/CitySearchForm/CitySearchForm.jsx","components/CityWeather/CityWeather.jsx","pages/Weather/Weather.jsx"],"sourcesContent":["export const getCities = state => state.cities.cities;\nexport const getCityWeather = state => state.cities.cityWeather;\nexport const getIsLoadingCities = state => state.cities.isLoadingCities;\nexport const getIsLoadingWeather = state => state.cities.isLoadingWeather;\nexport const getError = state => state.cities.error;\n","import { Button, CircularProgress } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGetCordinatesWeather } from 'redux/weather/weather-operations';\nimport {\n  getCities,\n  getIsLoadingWeather,\n} from 'redux/weather/weather-selectors';\n\nexport const CityListRender = () => {\n  const dispatch = useDispatch();\n  const cityNames = useSelector(getCities);\n  const isLoading = useSelector(getIsLoadingWeather);\n\n  const onClickHandler = (event, cityName) => {\n    const coordinates = {\n      lat: event.target.dataset.lat,\n      lon: event.target.dataset.lon,\n      units: event.target.dataset.units,\n    };\n    dispatch(fetchGetCordinatesWeather(coordinates));\n  };\n\n  return (\n    <ul>\n      {cityNames &&\n        cityNames.map(item => (\n          <li key={item?.lat + item?.lon}>\n            <ul>\n              <li> City: {item?.name ?? 'no information available'}</li>\n              <li> State: {item?.state ?? 'no information available'}</li>\n              <li> Country: {item?.country ?? 'no information available'}</li>\n              <li> lat: {item?.lat ?? 'no information available'}</li>\n              <li> lon: {item?.lon ?? 'no information available'}</li>\n            </ul>\n            <Button\n              type=\"button\"\n              onClick={event => onClickHandler(event, item.name)}\n              data-lat={item?.lat}\n              data-lon={item?.lon}\n              data-units=\"metric\"\n              fullWidth\n              sx={{ position: 'relative' }}\n            >\n              Check Weather\n              {isLoading && (\n                <CircularProgress\n                  size={24}\n                  sx={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    marginTop: '-12px',\n                    marginLeft: '-12px',\n                  }}\n                />\n              )}\n            </Button>\n          </li>\n        ))}\n    </ul>\n  );\n};\n","import { Button, CircularProgress, TextField } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchGetCityCoordinates } from 'redux/weather/weather-operations';\nimport { getIsLoadingCities } from 'redux/weather/weather-selectors';\nimport * as yup from 'yup';\n\nconst validationSchema = yup.object({\n  city: yup.string('Enter City Name').required('City Name is Required'),\n  state: yup.string('Enter State Name'),\n  country: yup.string('Enter Country Name'),\n});\n\nexport const CitySearchForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoadingCities);\n  const navigate = useNavigate();\n\n  const formik = useFormik({\n    initialValues: {\n      city: 'Kyiv',\n      state: '',\n      country: 'Ukraine',\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      const cityName = {\n        city: values.city,\n        state: values.state,\n        country: values.country,\n      };\n      dispatch(fetchGetCityCoordinates(cityName));\n      navigate(`/weather/${values.city}`); // add the city name to the route\n    },\n  });\n\n  return (\n    <>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          fullWidth\n          id=\"city\"\n          name=\"city\"\n          label=\"city\"\n          value={formik.values.city}\n          onChange={formik.handleChange}\n          error={formik.touched.city && Boolean(formik.errors.city)}\n          helperText={formik.touched.city && formik.errors.city}\n        />\n        <TextField\n          fullWidth\n          id=\"state\"\n          name=\"state\"\n          label=\"state\"\n          value={formik.values.state}\n          onChange={formik.handleChange}\n          error={formik.touched.state && Boolean(formik.errors.state)}\n          helperText={formik.touched.state && formik.errors.state}\n        />\n        <TextField\n          fullWidth\n          id=\"country\"\n          name=\"country\"\n          label=\"country\"\n          value={formik.values.country}\n          onChange={formik.handleChange}\n          error={formik.touched.country && Boolean(formik.errors.country)}\n          helperText={formik.touched.country && formik.errors.country}\n        />\n\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n          sx={{ position: 'relative' }}\n        >\n          Submit\n          {isLoading && (\n            <CircularProgress\n              size={24}\n              sx={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                marginTop: '-12px',\n                marginLeft: '-12px',\n                color: 'rgba(255,255,255,0.5)',\n              }}\n            />\n          )}\n        </Button>\n      </form>\n    </>\n  );\n};\n","import { Typography } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { getCityWeather } from 'redux/weather/weather-selectors';\n\nexport const CityWeather = () => {\n  const cityWeather = useSelector(getCityWeather);\n\n  return (\n    <>\n      <Typography variant=\"h2\">Weather</Typography>\n      <ul>\n        <li>\n          Geo coords: [{cityWeather?.coord?.lon}, {cityWeather?.coord?.lat}]\n        </li>\n        <li>\n          Weather: {cityWeather?.weather?.[0]?.main},{' '}\n          {cityWeather?.weather?.[0]?.description}.\n        </li>\n        <li>Temperature: {cityWeather?.main?.temp}</li>\n        <li>Feels like: {cityWeather?.main?.feels_like}</li>\n        <li>Minimum temperature: {cityWeather?.main?.temp_min}</li>\n        <li>Maximum temperature: {cityWeather?.main?.temp_max}</li>\n        <li>Pressure: {cityWeather?.main?.pressure}</li>\n        <li>Humidity: {cityWeather?.main?.humidity}</li>\n        <li>Sea Level: {cityWeather?.main?.sea_level}</li>\n        <li>Ground Level: {cityWeather?.main?.grnd_level}</li>\n        <li>Visibility: {cityWeather?.visibility}</li>\n        <li>Wind Speed: {cityWeather?.wind?.speed}</li>\n        <li>Wind Degree: {cityWeather?.wind?.deg}</li>\n        <li>Wind Gust: {cityWeather?.wind?.gust}</li>\n        <li>Name: {cityWeather?.name}</li>\n        <li>Cod: {cityWeather?.cod}</li>\n      </ul>\n    </>\n  );\n};\n","import { CityListRender } from 'components/CityListRender/CityListRender';\nimport { CitySearchForm } from 'components/CitySearchForm/CitySearchForm';\nimport { CityWeather } from 'components/CityWeather/CityWeather';\nimport { useSelector } from 'react-redux';\nimport { getCityWeather } from 'redux/weather/weather-selectors';\n\nconst Weather = () => {\n  const cityWeather = useSelector(getCityWeather);\n\n  return (\n    <>\n      <CitySearchForm />\n      <CityListRender />\n      {cityWeather.length === 0 ? null : <CityWeather />}\n    </>\n  );\n};\n\nexport default Weather;\n"],"names":["getCities","state","cities","getCityWeather","cityWeather","getIsLoadingCities","isLoadingCities","getIsLoadingWeather","isLoadingWeather","CityListRender","dispatch","useDispatch","cityNames","useSelector","isLoading","map","item","name","country","lat","lon","Button","type","onClick","event","cityName","coordinates","target","dataset","units","fetchGetCordinatesWeather","onClickHandler","fullWidth","sx","position","CircularProgress","size","top","left","marginTop","marginLeft","validationSchema","yup","city","required","CitySearchForm","navigate","useNavigate","formik","useFormik","initialValues","onSubmit","values","fetchGetCityCoordinates","handleSubmit","TextField","id","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","color","variant","CityWeather","Typography","coord","weather","main","description","temp","feels_like","temp_min","temp_max","pressure","humidity","sea_level","grnd_level","visibility","wind","speed","deg","gust","cod","length"],"sourceRoot":""}