{"version":3,"file":"static/js/344.6b007a41.chunk.js","mappings":"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","sources":["components/MapWithMarker/MapWithMarker.jsx","components/CityWeather/CityWeather.jsx","components/CityWeather/RenderWeatherDataItem.jsx","components/BackLink/BackLink.jsx","components/DetailedWeather/DetailedWeather.jsx","pages/WeatherDetails/WeatherDetails.jsx","redux/weather/weather-selectors.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport { fromLonLat } from 'ol/proj';\nimport { Icon, Style } from 'ol/style';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer } from 'ol/layer';\nimport { OSM } from 'ol/source';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\n\nexport const MapWithMarker = ({ lat = 50, lon = 50 }) => {\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    const map = new Map({\n      target: mapRef.current,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n        new VectorLayer({\n          source: new VectorSource({\n            features: [\n              new Feature({\n                geometry: new Point(fromLonLat([lon, lat])),\n              }),\n            ],\n          }),\n          style: new Style({\n            image: new Icon({\n              anchor: [0.5, 1],\n              src: 'https://openlayers.org/en/latest/examples/data/icon.png',\n            }),\n          }),\n        }),\n      ],\n      view: new View({\n        center: fromLonLat([lon, lat]),\n        zoom: 7,\n      }),\n    });\n    return () => map.dispose();\n  }, [lat, lon]);\n\n  return <div ref={mapRef} style={{ width: '100%', height: '400px' }}></div>;\n};\n","import {\n  Typography,\n  Link,\n  List,\n  CircularProgress,\n  Button,\n  useTheme,\n} from '@mui/material';\n\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { getCityWeather } from 'redux/weather/weather-selectors';\n\nimport { RenderWeatherDataItem } from './RenderWeatherDataItem';\nimport { MapWithMarker } from 'components/MapWithMarker/MapWithMarker';\n\nimport bg from '../../images/bgWeatherCard.jpg';\n\nexport const formatTemperature = temperature => {\n  return temperature.toFixed(1);\n};\n\nexport const CityWeather = ({ originalCity }) => {\n  const cityWeather = useSelector(getCityWeather);\n  const navigate = useNavigate();\n  const theme = useTheme();\n\n  const handleViewDetailsClick = () => {\n    navigate(`/weather/${originalCity}/details`);\n  };\n\n  if (\n    !cityWeather ||\n    !cityWeather.coord ||\n    !cityWeather.weather ||\n    !cityWeather.main ||\n    !cityWeather.wind\n  ) {\n    return (\n      <CircularProgress\n        size={24}\n        sx={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          marginTop: '-12px',\n          marginLeft: '-12px',\n          color: 'rgba(255,255,255,0.5)',\n        }}\n      />\n    );\n  }\n\n  const {\n    weather: [{ main: weatherMain, description: weatherDescription, icon }],\n    main: { temp, feels_like: feelsLike, pressure, humidity },\n    wind: { speed: windSpeed },\n  } = cityWeather;\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">\n        Weather in {originalCity}\n      </Typography>\n      <List\n        sx={{\n          border: '1px solid black',\n          borderRadius: theme.spacing(2),\n          backgroundImage: `url(${bg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          display: 'flex',\n          color: 'white',\n          textShadow: '0 0 4px black',\n          fontSize: '25px',\n          justifyContent: 'space-evenly',\n          marginBottom: theme.spacing(2),\n        }}\n      >\n        <img\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n          alt=\"weather_image\"\n        />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {RenderWeatherDataItem(\n            'Weather',\n            `${weatherMain}, ${weatherDescription}`\n          )}\n          {RenderWeatherDataItem('Temperature', `${formatTemperature(temp)}℃`)}\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {RenderWeatherDataItem(\n            'Feels like',\n            `${formatTemperature(feelsLike)}℃`\n          )}\n          {RenderWeatherDataItem('Pressure', `${pressure} hpa`)}\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          {RenderWeatherDataItem('Humidity', `${humidity} %`)}\n          {RenderWeatherDataItem('Wind Speed', `${windSpeed} m/s`)}\n        </div>\n      </List>\n      <Button\n        fullWidth\n        color=\"primary\"\n        variant=\"contained\"\n        onClick={handleViewDetailsClick}\n        component={Link}\n        aria-label={`View details for ${originalCity}`}\n        sx={{ marginBottom: theme.spacing(2) }}\n      >\n        View Details\n      </Button>\n      <MapWithMarker lat={cityWeather.coord.lat} lon={cityWeather.coord.lon} />\n    </>\n  );\n};\n","import { ListItem, ListItemText } from '@mui/material';\n\nexport const RenderWeatherDataItem = (label, value) => {\n  return (\n    <ListItem>\n      <ListItemText primary={`${label}: ${value}`} />\n    </ListItem>\n  );\n};\n","import { Link } from 'react-router-dom';\n\nimport { Button } from '@mui/material';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <Button component={Link} to={to}>\n      {children}\n    </Button>\n  );\n};\n","/* eslint-disable no-unused-vars */\nimport { Typography, List } from '@mui/material';\n\nimport { BackLink } from 'components/BackLink/BackLink';\nimport { formatTemperature } from 'components/CityWeather/CityWeather';\nimport { RenderWeatherDataItem } from 'components/CityWeather/RenderWeatherDataItem';\n\nimport { useSelector } from 'react-redux';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { getCityWeather } from 'redux/weather/weather-selectors';\n\nexport const DetailedWeather = () => {\n  const cityWeather = useSelector(getCityWeather);\n  const { cityName } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/weather';\n\n  const {\n    coord: { lon, lat },\n    weather: [{ id, main, description, icon }],\n    base,\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      pressure,\n      humidity,\n      sea_level,\n      grnd_level,\n    },\n    visibility,\n    wind: { speed, deg, gust },\n    clouds: { all },\n    dt,\n    sys: { country, sunrise, sunset },\n    id: cityId,\n    name,\n    cod,\n  } = cityWeather;\n\n  const formatTime = unixDate => {\n    const date = new Date(unixDate * 1000);\n    const hours = date.getHours();\n    const minutes = ('0' + date.getMinutes()).slice(-2);\n    const seconds = ('0' + date.getSeconds()).slice(-2);\n    const formattedTime = hours + ':' + minutes + ':' + seconds;\n    return formattedTime;\n  };\n\n  const formatedDt = formatTime(dt);\n  const formatedSunrise = formatTime(sunrise);\n  const formatedSunset = formatTime(sunset);\n\n  return (\n    <>\n      <BackLink to={backLinkHref}>Back</BackLink>\n\n      <Typography variant=\"h3\" component=\"h1\">\n        Weather in {cityName} in Details\n      </Typography>\n      <img\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n        alt=\"weather_image\"\n      />\n      <List>\n        {RenderWeatherDataItem(\n          'City geo location (longtitude, latitude)',\n          `[${lon}, ${lat}]`\n        )}\n        {RenderWeatherDataItem('Weather', `${main}, ${description}`)}\n        {RenderWeatherDataItem('Temperature', `${formatTemperature(temp)}℃`)}\n        {RenderWeatherDataItem(\n          'Feels like (this temperature parameter accounts for the human perception of weather)',\n          `${formatTemperature(feels_like)}℃`\n        )}\n        {RenderWeatherDataItem(\n          'Minimum temperature at the moment. This is minimal currently observed temperature (within large megalopolises and urban areas)',\n          `${formatTemperature(temp_min)}℃`\n        )}\n        {RenderWeatherDataItem(\n          'Maximum temperature at the moment. This is maximal currently observed temperature (within large megalopolises and urban areas)',\n          `${formatTemperature(temp_max)}℃`\n        )}\n        {RenderWeatherDataItem(\n          'Atmospheric pressure (on the sea level)',\n          `${pressure} hPa`\n        )}\n        {RenderWeatherDataItem('Humidity', `${humidity} %`)}\n        {RenderWeatherDataItem(\n          'Atmospheric pressure on the sea level',\n          `${sea_level} hPa`\n        )}\n        {RenderWeatherDataItem(\n          'Atmospheric pressure on the ground level',\n          `${grnd_level} hPa`\n        )}\n        {RenderWeatherDataItem('Visibility', `${visibility} meters`)}\n        {RenderWeatherDataItem('Wind speed.', `${speed} meter/sec`)}\n        {RenderWeatherDataItem(\n          'Wind direction',\n          `${deg} degrees (meteorological)`\n        )}\n        {RenderWeatherDataItem('Wind gust', `${gust} meter/sec`)}\n        {RenderWeatherDataItem('Cloudiness', `${all} %`)}\n        {RenderWeatherDataItem('Time of data calculation', `${formatedDt}`)}\n        {RenderWeatherDataItem('Country Code', `${country}`)}\n        {RenderWeatherDataItem('Sunrise time', `${formatedSunrise}`)}\n        {RenderWeatherDataItem('Sunset time', `${formatedSunset}`)}\n        {RenderWeatherDataItem('Station location City name', `${name}`)}\n      </List>\n    </>\n  );\n};\n","import { Container } from '@mui/material';\nimport { DetailedWeather } from 'components/DetailedWeather/DetailedWeather';\n\nconst WeatherDetails = () => {\n  return (\n    <>\n      <Container>\n        <DetailedWeather />\n      </Container>\n    </>\n  );\n};\n\nexport default WeatherDetails;\n","export const getCities = state => state.cities.cities;\nexport const getCityWeather = state => state.cities.cityWeather;\nexport const getIsLoadingCities = state => state.cities.isLoadingCities;\nexport const getIsLoadingWeather = state => state.cities.isLoadingWeather;\nexport const getError = state => state.cities.error;\n"],"names":["MapWithMarker","lat","lon","mapRef","useRef","useEffect","map","Map","target","current","layers","TileLayer","source","OSM","VectorLayer","VectorSource","features","Feature","geometry","Point","fromLonLat","style","Style","image","Icon","anchor","src","view","View","center","zoom","dispose","ref","width","height","formatTemperature","temperature","toFixed","CityWeather","originalCity","cityWeather","useSelector","getCityWeather","navigate","useNavigate","theme","useTheme","coord","weather","main","wind","CircularProgress","size","sx","position","top","left","marginTop","marginLeft","color","weatherMain","weatherDescription","description","icon","temp","feelsLike","feels_like","pressure","humidity","windSpeed","speed","Typography","variant","component","List","border","borderRadius","spacing","backgroundImage","bg","backgroundSize","backgroundPosition","backgroundRepeat","display","textShadow","fontSize","justifyContent","marginBottom","alt","flexDirection","RenderWeatherDataItem","Button","fullWidth","onClick","Link","label","value","primary","BackLink","to","children","DetailedWeather","cityName","useParams","backLinkHref","useLocation","state","from","id","base","temp_min","temp_max","sea_level","grnd_level","visibility","deg","gust","all","clouds","dt","sys","country","sunrise","sunset","name","formatTime","cod","unixDate","date","Date","getHours","getMinutes","slice","getSeconds","formatedDt","formatedSunrise","formatedSunset","Container","getCities","cities","getIsLoadingCities","isLoadingCities","getIsLoadingWeather","isLoadingWeather"],"sourceRoot":""}